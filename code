
void floatBenchmark(){
  auto start = high_resolution_clock::now();
  const int operations = 1010;
  double operand1 = 1.0, operand2 = 2.0, result = 0.0;
  for (int i = 0; i < operations; ++i) {
      result = operand1 + operand2; // Floating point addition
      result = operand1 * operand2; // Floating point multiplication
      result = operand1 / operand2; // Floating point division
  }
  auto stop = high_resolution_clock::now();
  auto duration = duration_cast<milliseconds>(stop - start);
  cout << "Floating point operation time: " << duration.count() << " milliseconds";
}

void memBenchmark(){
  auto start = high_resolution_clock::now();
  const long long elements = (5 * pow(10,9)); 
  const int bytes = 4;
  char* array = new char[elements * bytes];

  for (long long i = 0; i < elements; ++i) {
      char value = array[i * bytes];
      array[i * bytes] = value + 1;
  }
  auto stop = high_resolution_clock::now();
  auto duration = duration_cast<milliseconds>(stop - start);
  cout << "Memory benchmark time: " << duration.count() << " milliseconds";

  delete[] array;
}

void hardDriveBenchmark1(){
  const long long read_bytes = pow(10,9); // 10^9 bytes
  const int chunk_size = 100; // 100 bytes each time

  // Benchmark for reading from memory
  auto start = high_resolution_clock::now();
  ifstream inputFile("input_file.bin", ios::binary);
  char buffer[chunk_size];
  long long bytesRead = 0;
  while (bytesRead < read_bytes) {
      inputFile.read(buffer, chunk_size);
      bytesRead += inputFile.gcount();
  }
  inputFile.close();
  auto stop = high_resolution_clock::now();
  auto duration = duration_cast<milliseconds>(stop - start);
  cout << "Read time: " << duration.count() << " milliseconds";

// Benchmark for writing to memory
 start = high_resolution_clock::now();
  ofstream outputFile("output_file.bin", ios::binary);
  long long bytesWritten = 0;
  while (bytesWritten < read_bytes) {
      outputFile.write(buffer, chunk_size);
      bytesWritten += chunk_size;
  }
  outputFile.close();
  stop = high_resolution_clock::now();
  duration = duration_cast<milliseconds>(stop - start);
  cout << "Write time: " << duration.count() << " milliseconds";
}

void hardDriveBenchmark2(){
  const long long file_size = pow(10,9); // 10^9 bytes
  const int chunk_size = 10000; // 10000 bytes each time
  //Benchmark for reading a file
  auto start = high_resolution_clock::now();
  ifstream inputFile("input_file.bin", ios::binary);
  char buffer[chunk_size];
  long long bytesRead = 0;
  while (bytesRead < file_size) {
      inputFile.read(buffer, chunk_size);
      bytesRead += inputFile.gcount();
  }
  inputFile.close();
  auto stop = high_resolution_clock::now();
  auto duration = duration_cast<milliseconds>(stop - start);
  cout << "Read time: " << duration.count() << " milliseconds";

 // Benchmark for writing to file
  start = high_resolution_clock::now();
  ofstream outputFile("output_file.bin", ios::binary);
  long long bytesWritten = 0;
  while (bytesWritten < file_size) {
      outputFile.write(buffer, chunk_size);
      bytesWritten += chunk_size;
    }
  outputFile.close();
  stop = high_resolution_clock::now();
  duration = duration_cast<milliseconds>(stop - start);
  cout << "Write time: " << duration.count() << " milliseconds";
}